From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: ruscalworld <me@ruscal.world>
Date: Thu, 9 Mar 2023 10:52:28 +0300
Subject: [PATCH] Implement performance watchdog


diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index ad4fdbdcf09f30d10e61ccf47f8fb9ce6bd92e73..a3406b34e4dd8c8a3cb2bd39e57fac2052041367 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -4,19 +4,14 @@ import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
-import java.io.BufferedReader;
-import java.io.BufferedWriter;
-import java.io.IOException;
-import java.io.InputStreamReader;
+
+import java.io.*;
 import java.net.InetAddress;
 import java.net.Proxy;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.nio.file.Path;
-import java.util.Collections;
-import java.util.List;
-import java.util.Locale;
-import java.util.Optional;
+import java.util.*;
 import java.util.function.BooleanSupplier;
 import javax.annotation.Nullable;
 import net.minecraft.DefaultUncaughtExceptionHandler;
@@ -62,6 +57,9 @@ import co.aikar.timings.MinecraftTimings; // Paper
 import org.bukkit.event.server.ServerCommandEvent;
 import org.bukkit.craftbukkit.util.Waitable;
 import org.bukkit.event.server.RemoteServerCommandEvent;
+import ru.bortexel.utopia.UtopiaConfig;
+import ru.bortexel.utopia.management.PerformanceWatchdog;
+import ru.bortexel.utopia.management.PropertyPool;
 // CraftBukkit end
 
 public class DedicatedServer extends MinecraftServer implements ServerInterface {
@@ -224,6 +222,8 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         gg.pufferfish.pufferfish.PufferfishConfig.load(); // Pufferfish
         gg.pufferfish.pufferfish.PufferfishCommand.init(); // Pufferfish
 
+        ru.bortexel.utopia.UtopiaConfig.init((File) options.valueOf("utopia-settings"));
+
         this.setPvpAllowed(dedicatedserverproperties.pvp);
         this.setFlightAllowed(dedicatedserverproperties.allowFlight);
         this.setMotd(dedicatedserverproperties.motd);
@@ -341,6 +341,14 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
                 DedicatedServer.LOGGER.info("JMX monitoring enabled");
             }
 
+            // Utopia start
+            if (UtopiaConfig.configManagementEnabled) {
+                Timer timer = new Timer();
+                timer.schedule(new PerformanceWatchdog(), 0, UtopiaConfig.performanceWatchdogDelay);
+                PropertyPool.loadDefault(this);
+            }
+            // Utopia end
+
             if (gg.pufferfish.pufferfish.PufferfishConfig.enableAsyncMobSpawning) mobSpawnExecutor.start(); // Pufferfish
             return true;
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index b0ceac1a5a7becb2961ff72c057811bce3e798d3..799a9e037729a579351266ab6aa5ea54bcf18447 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -28,21 +28,7 @@ import java.io.IOException;
 import java.io.InputStreamReader;
 import java.nio.ByteBuffer;
 import java.nio.charset.StandardCharsets;
-import java.util.ArrayList;
-import java.util.Base64;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.LinkedHashMap;
-import java.util.LinkedHashSet;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-import java.util.Objects;
-import java.util.Optional;
-import java.util.Set;
-import java.util.UUID;
+import java.util.*;
 import java.util.function.Consumer;
 import java.util.logging.Level;
 import java.util.logging.Logger;
@@ -256,6 +242,9 @@ import org.yaml.snakeyaml.constructor.SafeConstructor;
 import org.yaml.snakeyaml.error.MarkedYAMLException;
 
 import net.md_5.bungee.api.chat.BaseComponent; // Spigot
+import ru.bortexel.utopia.UtopiaConfig;
+import ru.bortexel.utopia.management.PerformanceWatchdog;
+import ru.bortexel.utopia.management.PropertyPool;
 
 import javax.annotation.Nullable; // Paper
 import javax.annotation.Nonnull; // Paper
@@ -689,7 +678,7 @@ public final class CraftServer implements Server {
 
     @Override
     public int getViewDistance() {
-        return this.getProperties().viewDistance;
+        return PropertyPool.viewDistance; // Utopia
     }
 
     @Override
@@ -961,6 +950,7 @@ public final class CraftServer implements Server {
 
         org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
         this.console.paperConfigurations.reloadConfigs(this.console);
+        ru.bortexel.utopia.UtopiaConfig.init((File) console.options.valueOf("utopia-settings")); // Utopia
         for (ServerLevel world : this.console.getAllLevels()) {
             // world.serverLevelData.setDifficulty(config.difficulty); // Paper - per level difficulty
             world.setSpawnSettings(world.serverLevelData.getDifficulty() != Difficulty.PEACEFUL && config.spawnMonsters, config.spawnAnimals); // Paper - per level difficulty (from MinecraftServer#setDifficulty(ServerLevel, Difficulty, boolean))
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 54932d92b13b890b07f827c5f09bd137383d4ab5..db7ae18729352a50ccb1ac663935ed0b894f37f3 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -134,6 +134,8 @@ import org.bukkit.util.Consumer;
 import org.bukkit.util.RayTraceResult;
 import org.bukkit.util.StructureSearchResult;
 import org.bukkit.util.Vector;
+import ru.bortexel.utopia.UtopiaConfig;
+import ru.bortexel.utopia.management.PropertyPool;
 
 public class CraftWorld extends CraftRegionAccessor implements World {
     public static final int CUSTOM_DIMENSION_OFFSET = 10;
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 190e17eb28d166aedee06e9578561ba402d1b6d2..6d3a4ce5d90b9f406d64e972843c3b605bcea086 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -166,6 +166,14 @@ public class Main {
                         .describedAs("Jar file");
                 // Paper end
 
+                // Utopia Start
+                acceptsAll(asList("utopia", "utopia-settings"), "File for utopia settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("utopia.yml"))
+                        .describedAs("Yml file");
+                // Utopia end
+
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
                         .withRequiredArg()
diff --git a/src/main/java/ru/bortexel/utopia/UtopiaConfig.java b/src/main/java/ru/bortexel/utopia/UtopiaConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..3267488f2621d386e1662a449dcda7aa7c3a1142
--- /dev/null
+++ b/src/main/java/ru/bortexel/utopia/UtopiaConfig.java
@@ -0,0 +1,132 @@
+package ru.bortexel.utopia;
+
+import com.google.common.base.Throwables;
+import org.bukkit.Bukkit;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+import ru.bortexel.utopia.management.ControlledProperty;
+import ru.bortexel.utopia.management.PropertyPool;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.sql.Time;
+import java.util.HashMap;
+import java.util.List;
+import java.util.logging.Level;
+
+public class UtopiaConfig {
+
+    private static File CONFIG_FILE;
+    private static final String HEADER = "This is the main configuration file for Utopia.";
+    /*========================================================================*/
+    public static YamlConfiguration config;
+    /*========================================================================*/
+
+    public static void init(File configFile) {
+        CONFIG_FILE = configFile;
+        config = new YamlConfiguration();
+
+        try {
+            config.load(CONFIG_FILE);
+        } catch (IOException ignored) {
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load utopia.yml, please correct your syntax errors", ex);
+            throw Throwables.propagate(ex);
+        }
+
+        config.options().header(HEADER);
+        config.options().copyDefaults(true);
+        readConfig();
+    }
+
+    static void readConfig() {
+        for (Method method : UtopiaConfig.class.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(null);
+                    } catch (InvocationTargetException ex) {
+                        throw Throwables.propagate(ex.getCause());
+                    } catch (Exception ex) {
+                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+                    }
+                }
+            }
+        }
+
+        try {
+            config.save(CONFIG_FILE);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+        }
+    }
+
+    public static void set(String path, Object val) {
+        config.set(path, val);
+    }
+
+    public static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    public static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+    }
+
+    public static float getFloat(String path, float def) {
+        // TODO: Figure out why getFloat() always returns the default value.
+        return (float) getDouble(path, (double) def);
+    }
+
+    public static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+
+    public static <T> List getList(String path, T def) {
+        config.addDefault(path, def);
+        return (List<T>) config.getList(path, config.getList(path));
+    }
+
+    public static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+
+    public static String MANAGEMENT_ROOT = "config-management";
+    public static String MANAGEMENT_PROPERTIES = MANAGEMENT_ROOT + ".properties";
+    public static boolean configManagementEnabled = false;
+    public static Time configManagementEnableFrom = null;
+    public static Time configManagementEnableTill = null;
+    public static int performanceWatchdogDelay = 60000;
+
+    private static void configManagement() {
+        configManagementEnabled = getBoolean(MANAGEMENT_ROOT + ".enable.value", false);
+        if (configManagementEnabled) {
+            loadControlledProperty(new ControlledProperty("view-distance", 6, 10, 10, (v) -> PropertyPool.viewDistance = v));
+            loadControlledProperty(new ControlledProperty("monster-limit", 5, 70, 10, (v) -> PropertyPool.monsterSpawnLimit = v));
+            loadControlledProperty(new ControlledProperty("animal-limit", 2, 15, 7, (v) -> PropertyPool.animalSpawnLimit = v));
+            loadControlledProperty(new ControlledProperty("water-animal-limit", 1, 5, 7, (v) -> PropertyPool.waterAnimalSpawnLimit = v));
+            loadControlledProperty(new ControlledProperty("ambient-limit", 2, 15, 7, (v) -> PropertyPool.ambientSpawnLimit = v));
+            loadControlledProperty(new ControlledProperty("water-ambient-limit", 2, 20, 5, (v) -> PropertyPool.waterAmbientSpawnLimit = v));
+            loadControlledProperty(new ControlledProperty("water-underground-creature-limit", 1, 5, 7, (v) -> PropertyPool.waterUndergroundCreatureSpawnLimit = v));
+            loadControlledProperty(new ControlledProperty("axolotls-limit", 1, 5, 5, (v) -> PropertyPool.axolotlsSpawnLimit = v));
+        }
+
+        configManagementEnableFrom = Time.valueOf(getString(MANAGEMENT_ROOT + ".enable.from", "00:00:00"));
+        configManagementEnableTill = Time.valueOf(getString(MANAGEMENT_ROOT + ".enable.till", "23:59:59"));
+        performanceWatchdogDelay = getInt(MANAGEMENT_ROOT + ".delay", 60000);
+    }
+
+    public static HashMap<String, ControlledProperty> controlledProperties = new HashMap<>();
+
+    private static void loadControlledProperty(ControlledProperty property) {
+        controlledProperties.put(property.getName(), property);
+    }
+}
diff --git a/src/main/java/ru/bortexel/utopia/management/ControlledProperty.java b/src/main/java/ru/bortexel/utopia/management/ControlledProperty.java
new file mode 100644
index 0000000000000000000000000000000000000000..57ad32e43183fc34bf70e5f5db021e124b4452af
--- /dev/null
+++ b/src/main/java/ru/bortexel/utopia/management/ControlledProperty.java
@@ -0,0 +1,49 @@
+package ru.bortexel.utopia.management;
+
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.util.Consumer;
+import ru.bortexel.utopia.UtopiaConfig;
+
+public class ControlledProperty {
+    public double min;
+    public double max;
+    public int weight;
+    private final String name;
+    private final Consumer<Integer> updater;
+
+    public ControlledProperty(ConfigurationSection configuration, Consumer<Integer> updater) {
+        this.min = configuration.getDouble("min");
+        this.max = configuration.getDouble("max");
+        this.weight = configuration.getInt("weight");
+        this.name = configuration.getCurrentPath();
+        this.updater = updater;
+    }
+
+    public ControlledProperty(String name, double defMin, double defMax, int defWeight, Consumer<Integer> updater) {
+        String path = UtopiaConfig.MANAGEMENT_PROPERTIES + "." + name + ".";
+        this.min = UtopiaConfig.getDouble(path + "min", defMin);
+        this.max = UtopiaConfig.getDouble(path + "max", defMax);
+        this.weight = UtopiaConfig.getInt(path + "weight", defWeight);
+        this.name = name;
+        this.updater = updater;
+    }
+
+    public double getValue(double lagRate) {
+        // TODO: Add weight support
+        double value = this.min + (this.max - this.min) * lagRate / 100;
+        return Math.max(this.min, Math.min(this.max, value));
+    }
+
+    public void update(double lagRate) {
+        double value = lagRate < 0 ? min : this.getValue(lagRate);
+        this.updater.accept((int) Math.round(value));
+    }
+
+    public void update() {
+        this.update(-1);
+    }
+
+    public String getName() {
+        return name;
+    }
+}
diff --git a/src/main/java/ru/bortexel/utopia/management/PerformanceWatchdog.java b/src/main/java/ru/bortexel/utopia/management/PerformanceWatchdog.java
new file mode 100644
index 0000000000000000000000000000000000000000..7ee4f4d1fc53c3328038834172a2bf0e709abce8
--- /dev/null
+++ b/src/main/java/ru/bortexel/utopia/management/PerformanceWatchdog.java
@@ -0,0 +1,35 @@
+package ru.bortexel.utopia.management;
+
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftServer;
+import ru.bortexel.utopia.UtopiaConfig;
+
+import java.sql.Time;
+import java.time.LocalTime;
+import java.util.Map;
+import java.util.TimerTask;
+
+public class PerformanceWatchdog extends TimerTask {
+    @Override
+    public void run() {
+        Time now = Time.valueOf(LocalTime.now());
+        if (!UtopiaConfig.configManagementEnabled) return;
+        if (UtopiaConfig.configManagementEnableFrom.after(now) || UtopiaConfig.configManagementEnableTill.before(now))
+            return;
+
+        double currentTPS = Math.max(0, Bukkit.getTPS()[0] - 10);
+        double maxTPS = MinecraftServer.TPS - 10;
+        double rate = currentTPS / maxTPS * 100;
+
+        try {
+            for (Map.Entry<String, ControlledProperty> entry : UtopiaConfig.controlledProperties.entrySet()) {
+                entry.getValue().update(rate);
+            }
+
+            PropertyPool.updateSpawnLimits((CraftServer) Bukkit.getServer());
+        } catch (Exception e) {
+            Bukkit.getLogger().warning("Performance Watchdog failure: " + e.getLocalizedMessage());
+        }
+    }
+}
diff --git a/src/main/java/ru/bortexel/utopia/management/PropertyPool.java b/src/main/java/ru/bortexel/utopia/management/PropertyPool.java
new file mode 100644
index 0000000000000000000000000000000000000000..d2f4ac79c9405e4e8b5c0d39083d643cd41c0fbf
--- /dev/null
+++ b/src/main/java/ru/bortexel/utopia/management/PropertyPool.java
@@ -0,0 +1,44 @@
+package ru.bortexel.utopia.management;
+
+import net.minecraft.server.dedicated.DedicatedServer;
+import net.minecraft.server.dedicated.DedicatedServerProperties;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.entity.SpawnCategory;
+import ru.bortexel.utopia.UtopiaConfig;
+
+import java.util.Map;
+
+public class PropertyPool {
+    public static Integer viewDistance = 10;
+    public static Integer monsterSpawnLimit = 70;
+    public static Integer animalSpawnLimit = 15;
+    public static Integer waterAnimalSpawnLimit = 5;
+    public static Integer ambientSpawnLimit = 15;
+    public static Integer waterAmbientSpawnLimit = 20;
+    public static Integer waterUndergroundCreatureSpawnLimit = 5;
+    public static Integer axolotlsSpawnLimit = 5;
+
+    public static void loadDefault(DedicatedServer server) {
+        DedicatedServerProperties properties = server.getProperties();
+        viewDistance = properties.viewDistance;
+
+        for (Map.Entry<String, ControlledProperty> entry : UtopiaConfig.controlledProperties.entrySet()) {
+            entry.getValue().update();
+        }
+    }
+
+    public static void updateSpawnLimits(CraftServer server) {
+        server.getWorlds().forEach(world -> updateSpawnLimits((CraftWorld) world));
+    }
+
+    public static void updateSpawnLimits(CraftWorld world) {
+        world.setSpawnLimit(SpawnCategory.MONSTER, monsterSpawnLimit);
+        world.setSpawnLimit(SpawnCategory.ANIMAL, animalSpawnLimit);
+        world.setSpawnLimit(SpawnCategory.WATER_ANIMAL, waterAnimalSpawnLimit);
+        world.setSpawnLimit(SpawnCategory.WATER_AMBIENT, waterAmbientSpawnLimit);
+        world.setSpawnLimit(SpawnCategory.WATER_UNDERGROUND_CREATURE, waterUndergroundCreatureSpawnLimit);
+        world.setSpawnLimit(SpawnCategory.AMBIENT, ambientSpawnLimit);
+        world.setSpawnLimit(SpawnCategory.AXOLOTL, axolotlsSpawnLimit);
+    }
+}
