From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: RuscalWorld <me@ruscalworld.ru>
Date: Sat, 8 Jan 2022 19:28:33 +0300
Subject: [PATCH] Implement performance watchdog


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 1e7ae166a1d53fce28297e2eaebd11ec28a57a55..a2520627a43d9b42116e5f8f126b10d937c0807f 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -310,7 +310,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
     public volatile Thread shutdownThread; // Paper
     public volatile boolean abnormalExit = false; // Paper
-    
+
     public gg.pufferfish.pufferfish.util.AsyncExecutor mobSpawnExecutor = new gg.pufferfish.pufferfish.util.AsyncExecutor("MobSpawning", () -> true); // Pufferfish - optimize mob spawning
 
     public static <S extends MinecraftServer> S spin(Function<Thread, S> serverFactory) {
@@ -1711,7 +1711,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
     @DontObfuscate
     public String getServerModName() {
-        return "Pufferfish"; // Pufferfish - Pufferfish > // Paper - Paper > // Spigot - Spigot > // CraftBukkit - cb > vanilla!
+        return "Utopia"; // Utopia - Utopia > // Paper - Paper > // Spigot - Spigot > // CraftBukkit - cb > vanilla!
     }
 
     public SystemReport fillSystemReport(SystemReport details) {
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index aae2dadabedb075fd1bc712f0226882b85f4551d..46d9a0e646fca8eae9cc6521b694e1c6a31b10d2 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -6,10 +6,8 @@ import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.GameProfileRepository;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.datafixers.DataFixer;
-import java.io.BufferedReader;
-import java.io.BufferedWriter;
-import java.io.IOException;
-import java.io.InputStreamReader;
+
+import java.io.*;
 import java.net.InetAddress;
 import java.net.Proxy;
 import java.nio.charset.StandardCharsets;
@@ -235,6 +233,8 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         gg.pufferfish.pufferfish.PufferfishConfig.load(); // Pufferfish
         gg.pufferfish.pufferfish.PufferfishCommand.init(); // Pufferfish
 
+        ru.bortexel.utopia.UtopiaConfig.init((File) options.valueOf("utopia-settings"));
+
         this.setPvpAllowed(dedicatedserverproperties.pvp);
         this.setFlightAllowed(dedicatedserverproperties.allowFlight);
         this.setResourcePack(dedicatedserverproperties.resourcePack, this.getPackHash());
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 041ebfefca8f944f457a269f0e0b450b21949e73..1f45b04f3cd3645b0fb3b994b27609cfaa04662b 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -49,6 +49,7 @@ import java.util.function.Consumer;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import java.util.stream.Collectors;
+import java.util.Timer;
 import javax.imageio.ImageIO;
 import net.minecraft.advancements.Advancement;
 import net.minecraft.commands.CommandSourceStack;
@@ -249,12 +250,15 @@ import org.yaml.snakeyaml.constructor.SafeConstructor;
 import org.yaml.snakeyaml.error.MarkedYAMLException;
 
 import net.md_5.bungee.api.chat.BaseComponent; // Spigot
+import ru.bortexel.utopia.UtopiaConfig;
+import ru.bortexel.utopia.management.PerformanceWatchdog;
+import ru.bortexel.utopia.management.PropertyPool; // Utopia
 
 import javax.annotation.Nullable; // Paper
 import javax.annotation.Nonnull; // Paper
 
 public final class CraftServer implements Server {
-    private final String serverName = "Pufferfish"; // Paper // Pufferfish
+    private final String serverName = "Utopia"; // Utopia
     private final String serverVersion;
     private final String bukkitVersion = Versioning.getBukkitVersion();
     private final Logger logger = Logger.getLogger("Minecraft");
@@ -379,6 +383,12 @@ public final class CraftServer implements Server {
         this.minimumAPI = this.configuration.getString("settings.minimum-api");
         this.loadIcon();
         datapackManager = new io.papermc.paper.datapack.PaperDatapackManager(console.getPackRepository()); // Paper
+
+        // Utopia start
+        PropertyPool.loadDefault(console.settings.getProperties(), this);
+        Timer timer = new Timer();
+        timer.schedule(new PerformanceWatchdog(), 0, UtopiaConfig.performanceWatchdogDelay);
+        // Utopia end
     }
 
     public boolean getCommandBlockOverride(String command) {
@@ -693,7 +703,7 @@ public final class CraftServer implements Server {
 
     @Override
     public int getViewDistance() {
-        return this.getProperties().viewDistance;
+        return PropertyPool.viewDistance; // Utopia
     }
 
     @Override
@@ -952,6 +962,7 @@ public final class CraftServer implements Server {
 
         org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
         com.destroystokyo.paper.PaperConfig.init((File) console.options.valueOf("paper-settings")); // Paper
+        ru.bortexel.utopia.UtopiaConfig.init((File) console.options.valueOf("utopia-settings")); // Utopia
         for (ServerLevel world : this.console.getAllLevels()) {
             // world.serverLevelData.setDifficulty(config.difficulty); // Paper - per level difficulty
             world.setSpawnSettings(world.serverLevelData.getDifficulty() != Difficulty.PEACEFUL && config.spawnMonsters, config.spawnAnimals); // Paper - per level difficulty (from MinecraftServer#setDifficulty(ServerLevel, Difficulty, boolean))
@@ -2118,32 +2129,32 @@ public final class CraftServer implements Server {
 
     @Override
     public int getMonsterSpawnLimit() {
-        return this.monsterSpawn;
+        return PropertyPool.monsterSpawnLimit; // Utopia
     }
 
     @Override
     public int getAnimalSpawnLimit() {
-        return this.animalSpawn;
+        return PropertyPool.animalSpawnLimit; // Utopia
     }
 
     @Override
     public int getWaterAnimalSpawnLimit() {
-        return this.waterAnimalSpawn;
+        return PropertyPool.waterAnimalSpawnLimit; // Utopia
     }
 
     @Override
     public int getWaterAmbientSpawnLimit() {
-        return this.waterAmbientSpawn;
+        return PropertyPool.waterAmbientSpawnLimit; // Utopia
     }
 
     @Override
     public int getWaterUndergroundCreatureSpawnLimit() {
-        return this.waterUndergroundCreatureSpawn;
+        return PropertyPool.waterUndergroundCreatureSpawnLimit; // Utopia
     }
 
     @Override
     public int getAmbientSpawnLimit() {
-        return this.ambientSpawn;
+        return PropertyPool.ambientSpawnLimit; // Utopia
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 55bae3efbc630be6d40d415509de4c3e744a5004..08d3a940a64843412208e1fc68b100bef7124485 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -153,6 +153,14 @@ public class Main {
                         .describedAs("Jar file");
                 // Paper end
 
+                // Utopia Start
+                acceptsAll(asList("utopia", "utopia-settings"), "File for utopia settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("utopia.yml"))
+                        .describedAs("Yml file");
+                // Utopia end
+
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
                         .withRequiredArg()
diff --git a/src/main/java/org/bukkit/craftbukkit/util/Versioning.java b/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
index 80553face9c70c2a3d897681e7761df85b22d464..4b2ffe9ab30a8eee094bb274ad2b992256c1201c 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
@@ -11,7 +11,7 @@ public final class Versioning {
     public static String getBukkitVersion() {
         String result = "Unknown-Version";
 
-        InputStream stream = Bukkit.class.getClassLoader().getResourceAsStream("META-INF/maven/gg.pufferfish.pufferfish/pufferfish-api/pom.properties"); // Pufferfish
+        InputStream stream = Bukkit.class.getClassLoader().getResourceAsStream("META-INF/maven/ru.bortexel.utopia/utopia-api/pom.properties");
         Properties properties = new Properties();
 
         if (stream != null) {
diff --git a/src/main/java/ru/bortexel/utopia/UtopiaConfig.java b/src/main/java/ru/bortexel/utopia/UtopiaConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..1307e823962c63f5644b999ce0f3c80800b2ba24
--- /dev/null
+++ b/src/main/java/ru/bortexel/utopia/UtopiaConfig.java
@@ -0,0 +1,128 @@
+package ru.bortexel.utopia;
+
+import com.google.common.base.Throwables;
+import org.bukkit.Bukkit;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+import ru.bortexel.utopia.management.ControlledProperty;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.sql.Time;
+import java.util.HashMap;
+import java.util.List;
+import java.util.logging.Level;
+
+public class UtopiaConfig {
+
+    private static File CONFIG_FILE;
+    private static final String HEADER = "This is the main configuration file for Utopia.";
+    /*========================================================================*/
+    public static YamlConfiguration config;
+    /*========================================================================*/
+
+    public static void init(File configFile) {
+        CONFIG_FILE = configFile;
+        config = new YamlConfiguration();
+
+        try {
+            config.load(CONFIG_FILE);
+        } catch (IOException ignored) {
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load utopia.yml, please correct your syntax errors", ex);
+            throw Throwables.propagate(ex);
+        }
+
+        config.options().header(HEADER);
+        config.options().copyDefaults(true);
+        readConfig();
+    }
+
+    static void readConfig() {
+        for (Method method : UtopiaConfig.class.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(null);
+                    } catch (InvocationTargetException ex) {
+                        throw Throwables.propagate(ex.getCause());
+                    } catch (Exception ex) {
+                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+                    }
+                }
+            }
+        }
+
+        try {
+            config.save(CONFIG_FILE);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+        }
+    }
+
+    public static void set(String path, Object val) {
+        config.set(path, val);
+    }
+
+    public static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    public static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+    }
+
+    public static float getFloat(String path, float def) {
+        // TODO: Figure out why getFloat() always returns the default value.
+        return (float) getDouble(path, (double) def);
+    }
+
+    public static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+
+    public static <T> List getList(String path, T def) {
+        config.addDefault(path, def);
+        return (List<T>) config.getList(path, config.getList(path));
+    }
+
+    public static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+
+    public static String MANAGEMENT_ROOT = "config-management";
+    public static String MANAGEMENT_PROPERTIES = MANAGEMENT_ROOT + ".properties";
+    public static boolean configManagementEnabled = false;
+    public static Time configManagementEnableFrom = null;
+    public static Time configManagementEnableTill = null;
+    public static int performanceWatchdogDelay = 60000;
+    private static void configManagement() {
+        configManagementEnabled = getBoolean(MANAGEMENT_ROOT + ".enable.value", false);
+        if (configManagementEnabled) {
+            loadControlledProperty(new ControlledProperty("view-distance", 6, 10, 10));
+            loadControlledProperty(new ControlledProperty("monster-limit", 5, 70, 10));
+            loadControlledProperty(new ControlledProperty("animal-limit", 2, 15, 7));
+            loadControlledProperty(new ControlledProperty("water-animal-limit", 1, 5, 7));
+            loadControlledProperty(new ControlledProperty("ambient-limit", 2, 15, 7));
+            loadControlledProperty(new ControlledProperty("water-ambient-limit", 2, 20, 5));
+            loadControlledProperty(new ControlledProperty("water-underground-creature-limit", 1, 5, 7));
+        }
+
+        configManagementEnableFrom = Time.valueOf(getString(MANAGEMENT_ROOT + ".enable.from", "00:00:00"));
+        configManagementEnableTill = Time.valueOf(getString(MANAGEMENT_ROOT + ".enable.till", "23:59:59"));
+        performanceWatchdogDelay = getInt(MANAGEMENT_ROOT + ".delay", 60000);
+    }
+
+    public static HashMap<String, ControlledProperty> controlledProperties = new HashMap<>();
+    private static void loadControlledProperty(ControlledProperty property) {
+        controlledProperties.put(property.getName(), property);
+    }
+}
diff --git a/src/main/java/ru/bortexel/utopia/management/ControlledProperty.java b/src/main/java/ru/bortexel/utopia/management/ControlledProperty.java
new file mode 100644
index 0000000000000000000000000000000000000000..3d00d5837a786fc80955d1c814321b74a8287571
--- /dev/null
+++ b/src/main/java/ru/bortexel/utopia/management/ControlledProperty.java
@@ -0,0 +1,36 @@
+package ru.bortexel.utopia.management;
+
+import org.bukkit.configuration.ConfigurationSection;
+import ru.bortexel.utopia.UtopiaConfig;
+
+public class ControlledProperty {
+    public double min;
+    public double max;
+    public int weight;
+    private final String name;
+
+    public ControlledProperty(ConfigurationSection configuration) {
+        this.min = configuration.getDouble("min");
+        this.max = configuration.getDouble("max");
+        this.weight = configuration.getInt("weight");
+        this.name = configuration.getCurrentPath();
+    }
+
+    public ControlledProperty(String name, double defMin, double defMax, int defWeight) {
+        String path = UtopiaConfig.MANAGEMENT_PROPERTIES + "." + name + ".";
+        this.min = UtopiaConfig.getDouble(path + "min", defMin);
+        this.max = UtopiaConfig.getDouble(path + "max", defMax);
+        this.weight = UtopiaConfig.getInt(path + "weight", defWeight);
+        this.name = name;
+    }
+
+    public double getValue(double lagRate) {
+        // TODO: Add weight support
+        double value = this.min + (this.max - this.min) * lagRate / 100;
+        return Math.max(this.min, Math.min(this.max, value));
+    }
+
+    public String getName() {
+        return name;
+    }
+}
diff --git a/src/main/java/ru/bortexel/utopia/management/PerformanceWatchdog.java b/src/main/java/ru/bortexel/utopia/management/PerformanceWatchdog.java
new file mode 100644
index 0000000000000000000000000000000000000000..9cf3a432037152201f5702c77c9fec2fe1bdffdb
--- /dev/null
+++ b/src/main/java/ru/bortexel/utopia/management/PerformanceWatchdog.java
@@ -0,0 +1,49 @@
+package ru.bortexel.utopia.management;
+
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import ru.bortexel.utopia.UtopiaConfig;
+
+import java.sql.Time;
+import java.time.LocalTime;
+import java.util.TimerTask;
+
+public class PerformanceWatchdog extends TimerTask {
+    @Override
+    public void run() {
+        Time now = Time.valueOf(LocalTime.now());
+        if (!UtopiaConfig.configManagementEnabled) return;
+        if (UtopiaConfig.configManagementEnableFrom.after(now) || UtopiaConfig.configManagementEnableTill.before(now)) return;
+
+        double currentTPS = Math.max(0, Bukkit.getTPS()[0] - 10);
+        double maxTPS = MinecraftServer.TPS - 10;
+        double rate = currentTPS / maxTPS * 100;
+
+        try {
+            ControlledProperty viewDistance = UtopiaConfig.controlledProperties.get("view-distance");
+            ControlledProperty monsterSpawnLimit = UtopiaConfig.controlledProperties.get("monster-limit");
+            ControlledProperty animalSpawnLimit = UtopiaConfig.controlledProperties.get("animal-limit");
+            ControlledProperty waterAnimalSpawnLimit = UtopiaConfig.controlledProperties.get("water-animal-limit");
+            ControlledProperty ambientSpawnLimit = UtopiaConfig.controlledProperties.get("ambient-limit");
+            ControlledProperty waterAmbientSpawnLimit = UtopiaConfig.controlledProperties.get("water-ambient-limit");
+            ControlledProperty waterUndergroundCreatureSpawnLimit = UtopiaConfig.controlledProperties.get("water-ambient-underground-creature-limit");
+
+            if (viewDistance != null)
+                PropertyPool.viewDistance = (int) Math.round(viewDistance.getValue(rate));
+            if (monsterSpawnLimit != null)
+                PropertyPool.monsterSpawnLimit = (int) Math.round(monsterSpawnLimit.getValue(rate));
+            if (animalSpawnLimit != null)
+                PropertyPool.animalSpawnLimit = (int) Math.round(animalSpawnLimit.getValue(rate));
+            if (waterAnimalSpawnLimit != null)
+                PropertyPool.waterAnimalSpawnLimit = (int) Math.round(waterAnimalSpawnLimit.getValue(rate));
+            if (ambientSpawnLimit != null)
+                PropertyPool.ambientSpawnLimit = (int) Math.round(ambientSpawnLimit.getValue(rate));
+            if (waterAmbientSpawnLimit != null)
+                PropertyPool.waterAmbientSpawnLimit = (int) Math.round(waterAmbientSpawnLimit.getValue(rate));
+            if (waterUndergroundCreatureSpawnLimit != null)
+                PropertyPool.waterUndergroundCreatureSpawnLimit = (int) Math.round(waterUndergroundCreatureSpawnLimit.getValue(rate));
+        } catch (Exception e) {
+            Bukkit.getLogger().warning("Performance Watchdog failure: " + e.getLocalizedMessage());
+        }
+    }
+}
diff --git a/src/main/java/ru/bortexel/utopia/management/PropertyPool.java b/src/main/java/ru/bortexel/utopia/management/PropertyPool.java
new file mode 100644
index 0000000000000000000000000000000000000000..f752d8b25f978941b2428f55243968ce46636fc9
--- /dev/null
+++ b/src/main/java/ru/bortexel/utopia/management/PropertyPool.java
@@ -0,0 +1,24 @@
+package ru.bortexel.utopia.management;
+
+import net.minecraft.server.dedicated.DedicatedServerProperties;
+import org.bukkit.craftbukkit.CraftServer;
+
+public class PropertyPool {
+    public static Integer viewDistance = 10;
+    public static Integer monsterSpawnLimit = 70;
+    public static Integer animalSpawnLimit = 15;
+    public static Integer waterAnimalSpawnLimit = 5;
+    public static Integer ambientSpawnLimit = 15;
+    public static Integer waterAmbientSpawnLimit = 20;
+    public static Integer waterUndergroundCreatureSpawnLimit = 5;
+
+    public static void loadDefault(DedicatedServerProperties properties, CraftServer server) {
+        viewDistance = properties.viewDistance;
+        monsterSpawnLimit = server.getMonsterSpawnLimit();
+        animalSpawnLimit = server.getAnimalSpawnLimit();
+        waterAnimalSpawnLimit = server.getWaterAnimalSpawnLimit();
+        ambientSpawnLimit = server.getAmbientSpawnLimit();
+        waterAmbientSpawnLimit = server.getWaterAmbientSpawnLimit();
+        waterUndergroundCreatureSpawnLimit = server.getWaterUndergroundCreatureSpawnLimit();
+    }
+}
